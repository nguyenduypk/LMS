import React, { useRef, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Header from './Header';
import './CreateClassPage.css';

const SUBJECTS = [
  'To√°n', 'S·ªë h·ªçc', 'ƒê·∫°i s·ªë', 'ƒê·∫°i S·ªë v√† Gi·∫£i t√≠ch', 'Gi·∫£i t√≠ch',
  'H√¨nh h·ªçc', 'Ng·ªØ vƒÉn', 'Ti·∫øng Anh', 'V·∫≠t l√Ω', 'H√≥a h·ªçc', 'Sinh h·ªçc',
  'L·ªãch s·ª≠', 'ƒê·ªãa l√Ω', 'Tin h·ªçc', 'GDCD', 'C√¥ng ngh·ªá', 'Kh√°c'
];
const GRADES = [
  '6', '7', '8', '9', '10', '11', '12', 'ƒê·∫°i h·ªçc', 'Cao ƒê·∫≥ng', 'Kh√°c'
];

function CreateClassPage() {
  const navigate = useNavigate();
  const [coverImage, setCoverImage] = useState(null);
  const fileInputRef = useRef();

  // State cho c√°c b∆∞·ªõc
  const [className, setClassName] = useState('');
  const [selectedSubject, setSelectedSubject] = useState('');
  const [selectedGrade, setSelectedGrade] = useState('');
  const [otherSubject, setOtherSubject] = useState('');
  const [otherGrade, setOtherGrade] = useState('');
  const [createdClass, setCreatedClass] = useState(null);

  const handleCoverClick = () => {
    if (fileInputRef.current) fileInputRef.current.click();
  };
  const handleCoverChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (ev) => setCoverImage(ev.target.result);
      reader.readAsDataURL(file);
    }
  };

  // ƒêi·ªÅu ki·ªán ho√†n th√†nh t·ª´ng b∆∞·ªõc
  const isClassNameDone = className.trim().length > 0;
  const isSubjectDone = selectedSubject !== '' && (selectedSubject !== 'Kh√°c' || otherSubject.trim() !== '');
  const isGradeDone = selectedGrade !== '' && (selectedGrade !== 'Kh√°c' || otherGrade.trim() !== '');
  const subjectValue = selectedSubject === 'Kh√°c' ? otherSubject : selectedSubject;
  const gradeValue = selectedGrade === 'Kh√°c' ? otherGrade : selectedGrade;
  const canCreate = isClassNameDone && isSubjectDone && isGradeDone;

  const handleCreateClass = (e) => {
    e.preventDefault();
    if (!canCreate) return;
    const newClass = {
      id: Date.now(),
      name: className,
      code: Math.random().toString(36).substring(2, 8).toUpperCase(),
      students: 0,
      lectures: 0,
      homeworks: 0,
      materials: 0,
      subject: subjectValue,
      grade: gradeValue,
      // cover: coverImage, // Kh√¥ng l∆∞u ·∫£nh base64 v√†o localStorage
    };
    setCreatedClass({ ...newClass, cover: coverImage }); // V·∫´n hi·ªÉn th·ªã preview ·∫£nh khi t·∫°o
    // L∆∞u v√†o localStorage
    const prev = JSON.parse(localStorage.getItem('teacher_visible_classes') || '[]');
    localStorage.setItem('teacher_visible_classes', JSON.stringify([newClass, ...prev]));
    // Reset form
    setClassName('');
    setSelectedSubject('');
    setOtherSubject('');
    setSelectedGrade('');
    setOtherGrade('');
    setCoverImage(null);
    // ƒêi·ªÅu h∆∞·ªõng v·ªÅ TeacherDashboard sau khi t·∫°o l·ªõp th√†nh c√¥ng
    navigate('/teacher/dashboard');
  };

  return (
    <div className="create-class-root">
      <Header />
      <div className="create-class-container">

        <div className="create-class-form-section">
          <div className="create-class-form-group">
            <label className="create-class-label">T√™n l·ªõp h·ªçc</label>
            <input className="create-class-input" placeholder="V√≠ d·ª•: L·ªõp th·∫ßy Ng·ªçc 2015..." value={className} onChange={e => setClassName(e.target.value)} />
          </div>
          <div className="create-class-cover-upload">
            <input
              type="file"
              accept="image/*"
              style={{ display: 'none' }}
              ref={fileInputRef}
              onChange={handleCoverChange}
            />
            <div className="create-class-cover-placeholder" onClick={handleCoverClick} style={{ cursor: 'pointer', minHeight: 180 }}>
              {coverImage ? (
                <img src={coverImage} alt="·∫¢nh b√¨a" className="create-class-cover-preview" />
              ) : (
                <>
                  <span className="create-class-cover-icon">üôÇ</span>
                  <div className="create-class-cover-text">Th√™m ·∫£nh b√¨a</div>
                  <div className="create-class-cover-desc">·∫¢nh b√¨a khuy·∫øn ngh·ªã 2100px chi·ªÅu d√†i v√† 900px chi·ªÅu cao</div>
                </>
              )}
            </div>
          </div>
          <div className="create-class-form-group">
            <label className="create-class-label">M√£ b·∫£o v·ªá</label>
            <input className="create-class-input" />
          </div>
          <div className="create-class-switch-group">
            <div className="create-class-switch-row">
              <span>Ph√™ duy·ªát h·ªçc sinh</span>
              <input type="checkbox" className="create-class-switch" />
            </div>
            <div className="create-class-switch-desc">Ph√™ duy·ªát h·ªçc sinh tr√°nh t√¨nh tr·∫°ng ng∆∞·ªùi l·∫° v√†o l·ªõp h·ªçc m√† kh√¥ng c√≥ s·ª± cho ph√©p c·ªßa b·∫°n</div>
            <div className="create-class-switch-row">
              <span>Ch·∫∑n h·ªçc sinh t·ª± r·ªùi l·ªõp h·ªçc</span>
              <input type="checkbox" className="create-class-switch" />
            </div>
            <div className="create-class-switch-desc">T√≠nh nƒÉng n√†y gi√∫p gi√°o vi√™n x·ª≠ l√Ω t√¨nh hu·ªëng th√†nh vi√™n trong l·ªõp t·ªët h∆°n tr√°nh t√¨nh tr·∫°ng h·ªçc sinh t·ª± √Ω tho√°t kh·ªèi l·ªõp</div>
            <div className="create-class-switch-row">
              <span>Cho ph√©p h·ªçc sinh xem b·∫£ng ƒëi·ªÉm</span>
              <input type="checkbox" className="create-class-switch" />
            </div>
            <div className="create-class-switch-desc">H·ªçc sinh s·∫Ω ƒë∆∞·ª£c xem b·∫£ng ƒëi·ªÉm c·ªßa c√°c th√†nh vi√™n trong l·ªõp</div>
            <div className="create-class-switch-row">
              <span>T·∫Øt ho·∫°t ƒë·ªông b·∫£ng tin</span>
              <input type="checkbox" className="create-class-switch" />
            </div>
            <div className="create-class-switch-desc">H·ªçc sinh kh√¥ng th·ªÉ ƒëƒÉng b√†i, b√¨nh lu·∫≠n</div>
            <div className="create-class-switch-row">
              <span>H·∫°n ch·∫ø quy·ªÅn truy c·∫≠p c·ªßa gi√°o vi√™n ƒë·ªìng h√†nh</span>
              <input type="checkbox" className="create-class-switch" />
            </div>
            <div className="create-class-switch-desc">Gi√°o vi√™n ƒë·ªìng h√†nh ch·ªâ ƒë∆∞·ª£c ph√©p xem t√†i nguy√™n c·ªßa m√¨nh t·∫°o ra trong l·ªõp, bao g·ªìm: B√†i t·∫≠p, b√†i gi·∫£ng, t√†i li·ªáu</div>
          </div>
          <div className="create-class-form-group">
            <label className="create-class-label">Link nh√≥m Facebook</label>
            <input className="create-class-input" placeholder="Link nh√≥m Facebook" />
          </div>
          <div className="create-class-form-group">
            <label className="create-class-label">Facebook Fanpage</label>
            <input className="create-class-input" placeholder="Nh·∫≠p ƒë∆∞·ªùng link fanpage c·ªßa l·ªõp h·ªçc" />
          </div>
          <div className="create-class-form-group">
            <label className="create-class-label">M√¥n h·ªçc</label>
            <div className="create-class-subject-list">
              {SUBJECTS.map(subject => (
                <button
                  key={subject}
                  className={`create-class-subject-btn${selectedSubject === subject ? ' selected' : ''}`}
                  type="button"
                  onClick={() => { setSelectedSubject(subject); if(subject !== 'Kh√°c') setOtherSubject(''); }}
                >{subject}</button>
              ))}
            </div>
            {selectedSubject === 'Kh√°c' && (
              <input
                className="create-class-input create-class-other-input"
                placeholder="Nh·∫≠p m√¥n h·ªçc kh√°c..."
                value={otherSubject}
                onChange={e => setOtherSubject(e.target.value)}
                style={{ marginTop: 8 }}
              />
            )}
          </div>
          <div className="create-class-form-group">
            <label className="create-class-label">Kh·ªëi l·ªõp</label>
            <div className="create-class-grade-list">
              {GRADES.map(grade => (
                <button
                  key={grade}
                  className={`create-class-grade-btn${selectedGrade === grade ? ' selected' : ''}`}
                  type="button"
                  onClick={() => { setSelectedGrade(grade); if(grade !== 'Kh√°c') setOtherGrade(''); }}
                >{grade}</button>
              ))}
            </div>
            {selectedGrade === 'Kh√°c' && (
              <input
                className="create-class-input create-class-other-input"
                placeholder="Nh·∫≠p kh·ªëi l·ªõp kh√°c..."
                value={otherGrade}
                onChange={e => setOtherGrade(e.target.value)}
                style={{ marginTop: 8 }}
              />
            )}
          </div>
        </div>
        <div className="create-class-side-section">
          <button className="create-class-submit-btn" disabled={!canCreate} style={canCreate ? { background: '#1976d2', cursor: 'pointer' } : {}} onClick={handleCreateClass}>
            T·∫°o l·ªõp
          </button>
          <div className="create-class-required-note">B·∫°n ph·∫£i nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc ƒë·ªÉ t·∫°o l·ªõp <span className="create-class-required-star">*</span></div>
          <div className="create-class-steps-box">
            <div className="create-class-steps-title">C√°c b∆∞·ªõc ƒë√£ th·ª±c hi·ªán</div>
            <div className="create-class-step-row">
              <div className="create-class-step-info">
                <div className="create-class-step-label">ƒê·∫∑t t√™n l·ªõp h·ªçc</div>
                <div className="create-class-step-desc">B·∫Øt bu·ªôc - <span className="create-class-step-link">Th√™m ngay</span></div>
              </div>
              {isClassNameDone && <span className="create-class-step-check">‚úî</span>}
            </div>
            <div className="create-class-step-row">
              <div className="create-class-step-info">
                <div className="create-class-step-label">Ch·ªçn m√¥n h·ªçc</div>
                <div className="create-class-step-desc">B·∫Øt bu·ªôc - <span className="create-class-step-link">Th√™m ngay</span></div>
              </div>
              {isSubjectDone && <span className="create-class-step-check">‚úî</span>}
            </div>
            <div className="create-class-step-row">
              <div className="create-class-step-info">
                <div className="create-class-step-label">Ch·ªçn kh·ªëi l·ªõp</div>
                <div className="create-class-step-desc">B·∫Øt bu·ªôc - <span className="create-class-step-link">Th√™m ngay</span></div>
              </div>
              {isGradeDone && <span className="create-class-step-check">‚úî</span>}
            </div>
          </div>
        </div>
      </div>
      {createdClass && (
        <div className="create-class-result-box">
          <h3>L·ªõp h·ªçc v·ª´a t·∫°o</h3>
          {createdClass.cover && <img src={createdClass.cover} alt="·∫¢nh b√¨a" style={{ width: '100%', maxWidth: 400, borderRadius: 12, marginBottom: 12 }} />}
          <div><b>T√™n l·ªõp:</b> {createdClass.name}</div>
          <div><b>M√¥n h·ªçc:</b> {createdClass.subject}</div>
          <div><b>Kh·ªëi l·ªõp:</b> {createdClass.grade}</div>
        </div>
      )}
    </div>
  );
}

export default CreateClassPage; 